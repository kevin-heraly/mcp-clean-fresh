const express = require('express');
const session = require('cookie-session');
const dotenv = require('dotenv');
const jsforce = require('jsforce');
const crypto = require('crypto');

dotenv.config();

const app = express();
app.use(express.json());
app.use(session({
  name: 'session',
  keys: [process.env.SESSION_KEY || 'default_key'],
  maxAge: 24 * 60 * 60 * 1000 // 24 hours
}));

// OAuth Authorization Server Metadata endpoint
app.get('/.well-known/oauth-authorization-server', (req, res) => {
  res.json({
    issuer: "https://mcp-salesforce-production.up.railway.app",
    authorization_endpoint: "https://login.salesforce.com/services/oauth2/authorize",
    token_endpoint: "https://login.salesforce.com/services/oauth2/token",
    registration_endpoint: "https://mcp-salesforce-production.up.railway.app/register",
    response_types_supported: ["code"],
    grant_types_supported: ["authorization_code", "refresh_token"],
    code_challenge_methods_supported: ["S256"],
    token_endpoint_auth_methods_supported: ["client_secret_basic", "client_secret_post"]
  });
});

// Token endpoint with PKCE validation
app.post('/token', (req, res) => {
  const { grant_type, code, redirect_uri, client_id, code_verifier } = req.body;

  if (grant_type !== 'authorization_code' || !code || !redirect_uri || !client_id || !code_verifier) {
    res.set('WWW-Authenticate', 'Bearer realm="salesforce", error="invalid_token", error_description="Token is missing or invalid", authorization_uri="https://mcp-salesforce-production.up.railway.app/.well-known/oauth-authorization-server"');
    return res.status(401).json({ error: 'invalid_request' });
  }

  // Retrieve stored code_challenge from session or database associated with the authorization code
  const storedCodeChallenge = req.session.code_challenge; // Example: adjust according to your storage

  if (!storedCodeChallenge) {
    res.set('WWW-Authenticate', 'Bearer realm="salesforce", error="invalid_token", error_description="Token is missing or invalid", authorization_uri="https://mcp-salesforce-production.up.railway.app/.well-known/oauth-authorization-server"');
    return res.status(401).json({ error: 'invalid_grant', error_description: 'Authorization code not found or expired' });
  }

  // Verify the code_verifier against the stored code_challenge using S256 method
  const hash = crypto.createHash('sha256').update(code_verifier).digest();
  const base64url = hash.toString('base64')
    .replace(/\+/g, '-')
    .replace(/\//g, '_')
    .replace(/=+$/, '');

  if (base64url !== storedCodeChallenge) {
    res.set('WWW-Authenticate', 'Bearer realm="salesforce", error="invalid_token", error_description="Token is missing or invalid", authorization_uri="https://mcp-salesforce-production.up.railway.app/.well-known/oauth-authorization-server"');
    return res.status(401).json({ error: 'invalid_grant', error_description: 'Invalid code_verifier' });
  }

  // Proceed with token issuance (example, adjust with your logic)
  const conn = new jsforce.Connection();
  conn.oauth2.tokenRequest({
    grant_type,
    code,
    redirect_uri,
    client_id,
    client_secret: process.env.CLIENT_SECRET
  }, (err, tokenResponse) => {
    if (err) {
      res.set('WWW-Authenticate', 'Bearer realm="salesforce", error="invalid_token", error_description="Token is missing or invalid", authorization_uri="https://mcp-salesforce-production.up.railway.app/.well-known/oauth-authorization-server"');
      return res.status(401).json(err);
    }
    res.json(tokenResponse);
  });
});

// Other routes and server setup...

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
